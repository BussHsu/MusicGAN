import numpy as np
import tensorflow as tf
from tensorflow.python.ops import tensor_array_ops, control_flow_ops


class RNNDiscriminator(object):
    # input_x
    # input_y
    # dropout_prob
    # ypred_for_auc
    def __init__(self, vocab_size, batch_size, emb_dim, hidden_dim,
                 sequence_length, start_token = 0,
                 learning_rate=0.01,nrof_class = 2):
        self.num_emb = vocab_size
        self.batch_size = batch_size
        self.emb_dim = emb_dim
        self.hidden_dim = hidden_dim
        self.sequence_length = sequence_length
        self.start_token = tf.constant([start_token] * self.batch_size, dtype=tf.int32)
        self.learning_rate = learning_rate
        self.nrof_class = nrof_class
        self.g_params = []

        with tf.variable_scope('rnn_dicriminator'):
            self.g_embeddings = tf.Variable(self.init_matrix([self.num_emb, self.emb_dim])) #randomly initialize embedding
            self.g_recurrent_unit = self.create_recurrent_unit(self.g_params)  # maps h_tm1 to h_t for generator
            self.g_output_unit = self.create_output_unit(self.g_params)  # maps h_t to o_t (output token logits)

            #####################################################################################################
            # placeholder definition
            self.input_x = tf.placeholder(tf.int32, shape=[self.batch_size, self.sequence_length], name='input_x') # sequence of tokens generated by generator
            self.input_y = tf.placeholder(tf.float32, shape=[self.batch_size, self.nrof_class], name='input_y')

            # processed for batch
            with tf.device("/cpu:0"):
                self.processed_x = tf.transpose(tf.nn.embedding_lookup(self.g_embeddings, self.input_x), perm=[1, 0, 2])  # seq_length x batch_size x emb_dim

            ta_emb_x = tensor_array_ops.TensorArray(dtype=tf.float32, size=self.sequence_length)
            ta_emb_x = ta_emb_x.unstack(self.processed_x)

            #####################################################################################################
            # create initial state
            self.h0 = tf.zeros([self.batch_size, self.hidden_dim])
            self.h0 = tf.stack([self.h0, self.h0])


            # When current index i < given_num, use the provided tokens as the input at each time step
            def _g_recurrence_1(i, x_t, h_tm1):
                h_t = self.g_recurrent_unit(x_t, h_tm1)  # hidden_memory_tuple
                x_tp1 = ta_emb_x.read(i)
                return i + 1, x_tp1, h_t


            i, x_t, h_tm1 = control_flow_ops.while_loop(
                cond=lambda i, _1, _2: i < self.sequence_length,
                body=_g_recurrence_1,
                loop_vars=(tf.constant(0, dtype=tf.int32),  #i
                           tf.nn.embedding_lookup(self.g_embeddings, self.start_token), #x_t
                           self.h0))  #h_t
            # last token
            h_t = self.g_recurrent_unit(x_t, h_tm1)
            self.scores = self.g_output_unit(h_t)
            self.ypred_for_auc = tf.nn.softmax(self.scores)

            with tf.name_scope("rnn_loss"):
                losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)
                self.loss = tf.reduce_mean(losses)

            with tf.name_scope("rnn_train_op"):
                d_optimizer = tf.train.AdamOptimizer(learning_rate)
                grads_and_vars = d_optimizer.compute_gradients(self.loss, self.g_params)
                self.train_op = d_optimizer.apply_gradients(grads_and_vars)

    def create_recurrent_unit(self, params):
        # Weights and Bias for input and hidden tensor
        self.Wi = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Ui = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bi = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wf = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uf = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bf = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wog = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uog = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bog = tf.Variable(self.init_matrix([self.hidden_dim]))

        self.Wc = tf.Variable(self.init_matrix([self.emb_dim, self.hidden_dim]))
        self.Uc = tf.Variable(self.init_matrix([self.hidden_dim, self.hidden_dim]))
        self.bc = tf.Variable(self.init_matrix([self.hidden_dim]))
        params.extend([
            self.Wi, self.Ui, self.bi,
            self.Wf, self.Uf, self.bf,
            self.Wog, self.Uog, self.bog,
            self.Wc, self.Uc, self.bc])

        def unit(x, hidden_memory_tm1):
            previous_hidden_state, c_prev = tf.unstack(hidden_memory_tm1)

            # Input Gate
            i = tf.sigmoid(
                tf.matmul(x, self.Wi) +
                tf.matmul(previous_hidden_state, self.Ui) + self.bi
            )

            # Forget Gate
            f = tf.sigmoid(
                tf.matmul(x, self.Wf) +
                tf.matmul(previous_hidden_state, self.Uf) + self.bf
            )

            # Output Gate
            o = tf.sigmoid(
                tf.matmul(x, self.Wog) +
                tf.matmul(previous_hidden_state, self.Uog) + self.bog
            )

            # New Memory Cell
            c_ = tf.nn.tanh(
                tf.matmul(x, self.Wc) +
                tf.matmul(previous_hidden_state, self.Uc) + self.bc
            )

            # Final Memory cell
            c = f * c_prev + i * c_

            # Current Hidden state
            current_hidden_state = o * tf.nn.tanh(c)

            return tf.stack([current_hidden_state, c])

        return unit

    def create_output_unit(self, params):
        self.Wo = tf.Variable(self.init_matrix([self.hidden_dim, self.nrof_class]))
        self.bo = tf.Variable(self.init_matrix([self.nrof_class]))
        params.extend([self.Wo, self.bo])

        def unit(hidden_memory_tuple):
            hidden_state, c_prev = tf.unstack(hidden_memory_tuple)
            # hidden_state : batch x hidden_dim
            logits = tf.matmul(hidden_state, self.Wo) + self.bo
            # output = tf.nn.softmax(logits)
            return logits

        return unit

    def init_matrix(self, shape):
        return tf.random_normal(shape, stddev=0.1)

        # def __init__(self, sequence_length, num_classes, vocab_size, embedding_size, l2_reg_lambda=0.0):
        #     # Placeholders for input, output and dropout
        #     self.input_x = tf.placeholder(tf.int32, [None, sequence_length], name="input_x")
        #     self.input_y = tf.placeholder(tf.float32, [None, num_classes], name="input_y")
        #     self.dropout_keep_prob = tf.placeholder(tf.float32, name="dropout_keep_prob")
        #
        #     # Keeping track of l2 regularization loss (optional)
        #     l2_loss = tf.constant(0.0)
        #
        #     with tf.variable_scope('discriminator'):
        #         # Embedding layer
        #         with tf.device('/cpu:0'), tf.name_scope("embedding"):
        #             self.W = tf.Variable(
        #                 tf.random_uniform([vocab_size, embedding_size], -1.0, 1.0),
        #                 name="W")
        #             self.embedded_chars = tf.nn.embedding_lookup(self.W, self.input_x)
        #             self.embedded_chars_expanded = tf.expand_dims(self.embedded_chars, -1)
        #
        #         # Create a convolution + maxpool layer for each filter size
        #         pooled_outputs = []
        #         for filter_size, num_filter in zip(filter_sizes, num_filters):
        #             with tf.name_scope("conv-maxpool-%s" % filter_size):
        #                 # Convolution Layer
        #                 filter_shape = [filter_size, embedding_size, 1, num_filter]
        #                 # W is the filter matrix
        #                 W = tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name="W")
        #                 b = tf.Variable(tf.constant(0.1, shape=[num_filter]), name="b")
        #                 conv = tf.nn.conv2d(
        #                     self.embedded_chars_expanded,
        #                     W,
        #                     strides=[1, 1, 1, 1],
        #                     padding="VALID",
        #                     name="conv")
        #                 # Apply nonlinearity
        #                 h = tf.nn.relu(tf.nn.bias_add(conv, b), name="relu")
        #                 # Maxpooling over the outputs
        #                 pooled = tf.nn.max_pool(
        #                     h,
        #                     ksize=[1, sequence_length - filter_size + 1, 1, 1],
        #                     strides=[1, 1, 1, 1],
        #                     padding='VALID',
        #                     name="pool")
        #                 pooled_outputs.append(pooled)
        #
        #         # Combine all the pooled features
        #         num_filters_total = sum(num_filters)
        #         self.h_pool = tf.concat(pooled_outputs, 3)
        #         self.h_pool_flat = tf.reshape(self.h_pool, [-1, num_filters_total])
        #
        #         # Add highway
        #         with tf.name_scope("highway"):
        #             self.h_highway = highway(self.h_pool_flat, self.h_pool_flat.get_shape()[1], 1, 0)
        #
        #         # Add dropout
        #         with tf.name_scope("dropout"):
        #             self.h_drop = tf.nn.dropout(self.h_highway, self.dropout_keep_prob)
        #
        #         # Final (unnormalized) scores and predictions
        #         with tf.name_scope("output"):
        #             W = tf.Variable(tf.truncated_normal([num_filters_total, num_classes], stddev=0.1), name="W")
        #             b = tf.Variable(tf.constant(0.1, shape=[num_classes]), name="b")
        #             l2_loss += tf.nn.l2_loss(W)
        #             l2_loss += tf.nn.l2_loss(b)
        #             self.scores = tf.nn.xw_plus_b(self.h_drop, W, b, name="scores")
        #             self.ypred_for_auc = tf.nn.softmax(self.scores)
        #             self.predictions = tf.argmax(self.scores, 1, name="predictions")
        #
        #         # CalculateMean cross-entropy loss
        #         with tf.name_scope("loss"):
        #             losses = tf.nn.softmax_cross_entropy_with_logits(logits=self.scores, labels=self.input_y)
        #             self.loss = tf.reduce_mean(losses) + l2_reg_lambda * l2_loss
        #
        #     self.params = [param for param in tf.trainable_variables() if 'discriminator' in param.name]
        #     d_optimizer = tf.train.AdamOptimizer(1e-4)
        #     grads_and_vars = d_optimizer.compute_gradients(self.loss, self.params, aggregation_method=2)
        #     self.train_op = d_optimizer.apply_gradients(grads_and_vars)
